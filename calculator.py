import telebot
import time
import psycopg2
import os
import re
import requests
import datetime
import logging
import xml.etree.ElementTree as ET

from telebot import types
from dotenv import load_dotenv
from seleniumwire import webdriver
from selenium.common.exceptions import NoSuchElementException, WebDriverException
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from urllib.parse import urlparse, parse_qs
from selenium.webdriver.support import expected_conditions as EC

# utils.py import
from config import bot
from utils import (
    calculate_excise_by_volume,
    clear_memory,
    format_number,
    print_message,
    calculate_age,
    calculate_horse_power,
    calculate_customs_fee,
    calculate_recycling_fee,
    calculate_customs_duty,
    calculate_excise_russia,
    calculate_customs_fee_kg,
)


load_dotenv()

CHROMEDRIVER_PATH = os.getenv("CHROMEDRIVER_PATH_LOCAL")
DATABASE_URL = "postgres://uea5qru3fhjlj:p44343a46d4f1882a5ba2413935c9b9f0c284e6e759a34cf9569444d16832d4fe@c97r84s7psuajm.cluster-czrs8kj4isg7.us-east-1.rds.amazonaws.com:5432/d9pr93olpfl9bj"

proxy = {
    "http": "http://B01vby:GBno0x@45.118.250.2:8000",
    "https": "http://B01vby:GBno0x@45.118.250.2:8000",
    "no-proxy": "localhost,127.0.0.1",
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
car_data = {}
car_id_external = None

# –î–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
usd_rate_kz = 0
krw_rate_kz = 0

# –î–ª—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞
usd_rate_krg = 0
krw_rate_krg = 0

last_error_message_id = {}

# –î–ª—è –†–æ—Å—Å–∏–∏
usd_rate = 0
krw_rub_rate = 0
eur_rub_rate = 0

current_country = ""
car_fuel_type = ""


def get_usd_to_krw_rate():
    url = "https://api.manana.kr/exchange/rate.json?base=KRW&code=KRW,USD,JPY"
    response = requests.get(url)
    if response.status_code == 200:
        rates = response.json()
        for rate in rates:
            if rate["name"] == "USDKRW=X":
                return rate["rate"]
    else:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
def show_country_selection(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_russia = types.KeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è")
    btn_kazakhstan = types.KeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω")
    btn_kyrgyzstan = types.KeyboardButton("üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é
    markup.add(btn_russia, btn_kazakhstan, btn_kyrgyzstan)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
    bot.send_message(
        chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞:", reply_markup=markup
    )


# –ö—É—Ä—Å –≤–∞–ª—é—Ç –¥–ª—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞
def get_nbkr_currency_rates():
    global usd_rate_krg, krw_rate_krg

    clear_memory()

    print_message("[–ö–£–†–°] –ö–´–†–ì–´–ó–°–¢–ê–ù")

    url = "https://www.nbkr.kg/XML/daily.xml"
    weekly_url = "https://www.nbkr.kg/XML/weekly.xml"

    try:
        # –ó–∞–ø—Ä–æ—Å –∫ API –ù–ë–ö–†
        response = requests.get(url)
        response.raise_for_status()

        # –ü–∞—Ä—Å–∏–Ω–≥ XML-–æ—Ç–≤–µ—Ç–∞
        root = ET.fromstring(response.content)

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        currency_rates = {}

        # –í–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω—ã
        target_currencies = {"USD", "EUR", "RUB", "CNY"}

        # –î–∞—Ç–∞ –∫—É—Ä—Å–∞
        rates_date = root.get("Date")

        for item in root.findall("./Currency"):
            code = item.get("ISOCode")
            rate_element = item.find("Value")

            if code in target_currencies and rate_element is not None:
                rate = float(rate_element.text.replace(",", "."))
                currency_rates[code] = rate

        usd_rate_krg = currency_rates["USD"]

        try:
            response_weekly = requests.get(weekly_url)
            response_weekly.raise_for_status()

            root = ET.fromstring(response_weekly.content)

            for item in root.findall("./Currency"):
                # –ü–æ–ª—É—á–∞–µ–º ISOCode –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ Currency
                code = item.get("ISOCode")
                rate_element = item.find("Value")

                if code == "KRW":
                    krw_rate_krg = float(rate_element.text.replace(",", "."))
                    break
        except:
            print("Error...")

        rates_text = (
            f"–ö—É—Ä—Å –í–∞–ª—é—Ç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω ({rates_date}):\n\n"
            f"EUR: {currency_rates['EUR']:.2f} KGS\n"
            f"USD: {currency_rates['USD']:.2f} KGS\n"
            f"RUB: {currency_rates['RUB']:.2f} KGS\n"
            f"CNY: {currency_rates['CNY']:.2f} KGS\n"
        )

        return rates_text

    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ù–ë–ö–† API: {e}")
        return None
    except ET.ParseError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ XML: {e}")
        return None


# –ö—É—Ä—Å –≤–∞–ª—é—Ç –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
def get_nbk_currency_rates():
    print_message("[–ö–£–†–°] –ö–ê–ó–ê–•–°–¢–ê–ù")

    clear_memory()

    global usd_rate_kz, krw_rate_kz

    url = "https://nationalbank.kz/rss/rates_all.xml"

    try:
        # –ó–∞–ø—Ä–æ—Å –∫ API –ù–ë–ö
        response = requests.get(url)
        response.raise_for_status()

        # –ü–∞—Ä—Å–∏–Ω–≥ XML-–æ—Ç–≤–µ—Ç–∞
        root = ET.fromstring(response.content)

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        currency_rates = {}

        # –í–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω—ã
        target_currencies = {"USD", "EUR", "KRW", "CNY"}

        # –î–∞—Ç–∞ –∫—É—Ä—Å–∞
        rates_date = ""

        # –ù–æ–º–∏–Ω–∞–ª—ã
        nominals = {}

        # –ü–æ–∏—Å–∫ –Ω—É–∂–Ω—ã—Ö –≤–∞–ª—é—Ç –≤ XML-–¥–µ—Ä–µ–≤–µ
        for item in root.findall("./channel/item"):
            title = item.find("title").text  # –ö–æ–¥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "USD")
            description = item.find("description").text  # –ö—É—Ä—Å –∫ —Ç–µ–Ω–≥–µ
            rates_date = item.find("pubDate").text
            nominal = item.find("quant").text

            if title in target_currencies:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ —Å–ª–æ–≤–∞—Ä—å, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫—É—Ä—Å –≤ float
                currency_rates[title] = float(description)
                nominals[title] = float(nominal)

        usd_rate_kz = float(currency_rates["USD"])
        krw_rate_kz = float(currency_rates["KRW"]) / nominals["KRW"]

        rates_text = (
            f"–ö—É—Ä—Å –í–∞–ª—é—Ç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ({rates_date}):\n\n"
            f"EUR: {currency_rates['EUR']:.2f} ‚Ç∏\n"
            f"USD: {currency_rates['USD']:.2f} ‚Ç∏\n"
            f"KRW: {currency_rates['KRW']:.2f} ‚Ç∏\n"
            f"CNY: {currency_rates['CNY']:.2f} ‚Ç∏\n"
        )

        return rates_text

    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ù–ë–ö API: {e}")
        return None
    except ET.ParseError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ XML: {e}")
        return None


# –ö—É—Ä—Å –≤–∞–ª—é—Ç –¥–ª—è –†–æ—Å—Å–∏–∏
def get_currency_rates():
    global krw_rub_rate, eur_rub_rate

    clear_memory()

    print_message("[–ö–£–†–°] –†–û–°–°–ò–Ø")

    global usd_rate

    url = "https://www.cbr-xml-daily.ru/daily_json.js"
    response = requests.get(url)
    data = response.json()

    # –î–∞—Ç–∞ –∫—É—Ä—Å–∞
    rates_date = datetime.datetime.now().strftime("%d.%m.%Y")

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    eur_rate = data["Valute"]["EUR"]["Value"]
    usd_rate = data["Valute"]["USD"]["Value"]
    krw_rate = data["Valute"]["KRW"]["Value"] / data["Valute"]["KRW"]["Nominal"]
    cny_rate = data["Valute"]["CNY"]["Value"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞—Å—á—ë—Ç–æ–≤
    krw_rub_rate = krw_rate
    eur_rub_rate = eur_rate

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    rates_text = (
        f"–ö—É—Ä—Å –≤–∞–ª—é—Ç –¶–ë ({rates_date}):\n\n"
        f"EUR {eur_rate:.2f} ‚ÇΩ\n"
        f"USD {usd_rate:.2f} ‚ÇΩ\n"
        f"KRW {krw_rate:.2f} ‚ÇΩ\n"
        f"CNY {cny_rate:.2f} ‚ÇΩ"
    )

    return rates_text


def send_error_message(message, error_text):
    global last_error_message_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –µ–≥–æ
    if last_error_message_id.get(message.chat.id):
        try:
            bot.delete_message(message.chat.id, last_error_message_id[message.chat.id])
        except telebot.apihelper.ApiTelegramException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    try:
        error_message = bot.reply_to(message, error_text)
        last_error_message_id[message.chat.id] = error_message.id
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}: {error_text}")
    except telebot.apihelper.ApiTelegramException as e:
        logging.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}: {e}"
        )
    except Exception as e:
        logging.error(
            f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}: {e}"
        )


def extract_sitekey(driver, url):
    driver.get(url)

    iframe = driver.find_element(By.TAG_NAME, "iframe")
    iframe_src = iframe.get_attribute("src")
    match = re.search(r"k=([A-Za-z0-9_-]+)", iframe_src)

    if match:
        sitekey = match.group(1)
        return sitekey
    else:
        return None


def send_recaptcha_token(token):
    data = {"token": token, "action": "/dc/dc_cardetailview.do"}
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36",
        "Accept-Language": "ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7",
        "Content-Type": "application/x-www-form-urlencoded",
        "Referer": "http://www.encar.com/index.do",
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–ø—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    url = "https://www.encar.com/validation_recaptcha.do?method=v3"
    response = requests.post(
        url, data=data, headers=headers, proxies=proxy, verify=True
    )

    # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("\n\n–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
    print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
    print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}\n\n")

    try:
        result = response.json()

        if result[0]["success"]:
            print("reCAPTCHA —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!")
            return True
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ reCAPTCHA.")
            return False
    except requests.exceptions.JSONDecodeError:
        print("–û—à–∏–±–∫–∞: –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON.")
        return False
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return False


def create_driver():
    chrome_options = Options()
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    # chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.92 Safari/537.36"
    )

    prefs = {
        "profile.default_content_setting_values.notifications": 2,  # –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        "credentials_enable_service": False,
        "profile.password_manager_enabled": False,
    }
    chrome_options.add_experimental_option("prefs", prefs)

    seleniumwire_options = {"proxy": proxy}

    driver = webdriver.Chrome(
        options=chrome_options, seleniumwire_options=seleniumwire_options
    )

    return driver


def get_car_info(url):
    global car_id_external

    # driver = create_driver()

    car_id_match = re.findall(r"\d+", url)
    car_id = car_id_match[0]
    car_id_external = car_id

    url = f"https://api.encar.com/v1/readside/vehicle/{car_id}"

    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
        "Referer": "http://www.encar.com/",
        "Cache-Control": "max-age=0",
        "Connection": "keep-alive",
    }

    response = requests.get(url, headers=headers).json()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é
    car_price = str(response["advertisement"]["price"])
    car_date = response["category"]["yearMonth"]
    year = car_date[2:4]
    month = car_date[4:]
    car_engine_displacement = str(response["spec"]["displacement"])
    car_type = response["spec"]["bodyName"]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    formatted_car_date = f"01{month}{year}"
    formatted_car_type = "crossover" if car_type == "SUV" else "sedan"

    print_message(
        f"ID: {car_id}\nType: {formatted_car_type}\nDate: {formatted_car_date}\nCar Engine Displacement: {car_engine_displacement}\nPrice: {car_price} KRW"
    )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
    conn = psycopg2.connect(DATABASE_URL, sslmode="require")
    cursor = conn.cursor()
    cursor.execute(
        """
        INSERT INTO car_info (car_id, date, engine_volume, price, car_type)
        VALUES (%s, %s, %s, %s, %s)
        ON CONFLICT (car_id) DO NOTHING
        """,
        (
            car_id,
            formatted_car_date,
            car_engine_displacement,
            car_price,
            formatted_car_type,
        ),
    )
    conn.commit()
    cursor.close()
    conn.close()
    print("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    return [formatted_car_date, car_price, car_engine_displacement, formatted_car_type]


def calculate_cost(country, message):
    global car_data, car_id_external, util_fee, current_country, krw_rub_rate, eur_rub_rate, usd_rate_kz, usd_rate_krg, krw_rate_krg

    print_message("–ó–ê–ü–†–û–° –ù–ê –†–ê–°–ß–Å–¢ –ê–í–¢–û–ú–û–ë–ò–õ–Ø")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω—É —á—Ç–æ –±—ã –≤—ã–≤–æ–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞
    current_country = country

    car_id = None
    car_date, car_engine_displacement, car_price, car_type = (
        None,
        None,
        None,
        None,
    )
    link = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
    if "fem.encar.com" in link:
        car_id_match = re.findall(r"\d+", link)
        if car_id_match:
            car_id = car_id_match[0]  # Use the first match of digits
            car_id_external = car_id
            link = f"https://fem.encar.com/cars/detail/{car_id}"
        else:
            send_error_message(message, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å carid –∏–∑ —Å—Å—ã–ª–∫–∏.")
            return
    else:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º carid —Å URL encar
        parsed_url = urlparse(link)
        query_params = parse_qs(parsed_url.query)
        car_id = query_params.get("carid", [None])[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = psycopg2.connect(DATABASE_URL, sslmode="require")
    cursor = conn.cursor()

    cursor.execute(
        "SELECT date, engine_volume, price, car_type FROM car_info WHERE car_id = %s",
        (car_id,),
    )
    car_from_db = cursor.fetchone()
    car_title = ""

    if car_from_db:
        # –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        date, engine_volume, price, car_type = car_from_db
        car_date = date
        car_engine_displacement = engine_volume
        car_price = price
        car_type = car_type
        print_message(
            f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ID: {car_id}\nRegistration Date: {date}\nCar Engine Displacement: {engine_volume}\n Car Price: {price} KRW"
        )
    else:
        print("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        # –ê–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –≤—ã–∑—ã–≤–∞–µ–º get_car_info
        result = get_car_info(link)
        car_date, car_price, car_engine_displacement, car_type = result

        if result is None:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ get_car_info –¥–ª—è —Å—Å—ã–ª–∫–∏: {link}")
            send_error_message(
                message,
                "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            )
            # bot.delete_message(message.chat.id, processing_message.message_id)
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not car_date or not car_price or not car_engine_displacement:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/GLORY_TRADERS"
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        bot.send_message(
            message.chat.id, car_title, parse_mode="HTML", reply_markup=keyboard
        )
        bot.delete_message(message.chat.id, processing_message.message_id)
        return

    print_message(f"{car_date} {car_price} {car_engine_displacement}")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
    if car_price and car_date and car_engine_displacement:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è –†–æ—Å—Å–∏–∏
        if current_country == "Russia":
            print_message("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏")

            year, month = 0, 0
            if len(car_date) > 6:
                year = int(f"20{re.sub(r"\D", "", car_date.split(" ")[0])}")
                month = int(re.sub(r"\D", "", car_date.split(" ")[1]))
            else:
                year = int(f"20{car_date[-2:]}")
                month = int(car_date[2:4])

            age_formatted = calculate_age(year, month)
            engine_volume_formatted = f"{format_number(car_engine_displacement)} cc"

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ —Ä—É–±–ª–∏
            price_krw = int(car_price) * 10000
            car_price_rub = price_krw * krw_rub_rate

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ –ª.—Å.
            # horsepower = calculate_horse_power(car_engine_displacement)

            # –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä
            customs_fee = calculate_customs_fee(car_price_rub)

            # –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞
            car_price_eur = car_price_rub / eur_rub_rate
            customs_duty = calculate_customs_duty(
                car_price_eur,
                int(car_engine_displacement),
                (eur_rub_rate + 3),
                age_formatted,
            )

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä
            recycling_fee = calculate_recycling_fee(
                int(car_engine_displacement), age_formatted
            )

            # customs_duty = calculate_customs_duty(car_engine_displacement, eur_rub_rate)
            excise_fee = calculate_excise_by_volume(
                engine_volume=int(car_engine_displacement)
            )

            # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            total_cost = (
                (1000 * usd_rate)
                + (250 * usd_rate)
                + 120000
                + customs_duty
                + recycling_fee
                + 440000 * krw_rub_rate
                + car_price_rub
            )

            car_data["price_rub"] = car_price_rub
            car_data["duty"] = customs_fee
            car_data["recycling_fee"] = recycling_fee
            car_data["total_price"] = total_cost
            car_data["customs_duty_fee"] = customs_duty
            car_data["excise"] = excise_fee

            preview_link = f"https://fem.encar.com/cars/detail/{car_id}"

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_message = (
                f"–í–æ–∑—Ä–∞—Å—Ç: {age_formatted}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ö–æ—Ä–µ–µ: {format_number(price_krw)} ‚Ç©\n"
                f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n\n"
                f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–¥ –∫–ª—é—á –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: \n<b>{format_number(total_cost)} ‚ÇΩ</b>\n\n"
                f"üîó <a href='{preview_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å</a>\n\n"
                "–ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @GLORY_TRADERS\n\n"
                "üîó <a href='https://t.me/GLORYTRADERS'>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª</a>\n"
            )

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail"
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "üìù –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                    callback_data="technical_report",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/GLORY_TRADERS"
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )

            bot.send_message(
                message.chat.id,
                result_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )

        elif current_country == "Kazakhstan":
            print_message("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞")

            year, month = 0, 0
            if len(car_date) > 6:
                year = int(f"20{re.sub(r"\D", "", car_date.split(" ")[0])}")
                month = int(re.sub(r"\D", "", car_date.split(" ")[1]))
            else:
                year = int(f"20{car_date[-2:]}")
                month = int(car_date[2:4])

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∞–≤—Ç–æ –≤ —Ç–µ–Ω–≥–µ
            car_price_krw = int(car_price) * 10000
            car_price_kzt = car_price_krw * krw_rate_kz

            # –ù–î–° (12%)
            vat_kzt = car_price_kzt * 0.12

            # –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (15%)
            customs_fee_kzt = car_price_kzt * 0.15

            # –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è
            customs_declaration_fee_kzt = 25152

            # –£—Ç–∏–ª—å—Å–±–æ—Ä
            engine_volume = int(car_engine_displacement)
            base_utilization_fee_kzt = 200000  # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            if engine_volume <= 1000:
                coefficient = 0.5
            elif engine_volume <= 2000:
                coefficient = 1.0
            elif engine_volume <= 3000:
                coefficient = 2.0
            elif engine_volume <= 4000:
                coefficient = 3.0
            else:
                coefficient = 4.0

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ç–∏–ª—å—Å–±–æ—Ä
            utilization_fee_kzt = base_utilization_fee_kzt * coefficient

            # –ê–∫—Ü–∏–∑–Ω—ã–π —Å–±–æ—Ä
            excise_fee_kzt = (
                (int(car_engine_displacement) - 3000) * 100
                if int(car_engine_displacement) > 3000
                else 0
            )

            # –£—Å–ª—É–≥–∏ Glory Traders
            glory_traders_fee_kzt = 450000 * krw_rate_kz

            # –£—Å–ª—É–≥–∏ –±—Ä–æ–∫–µ—Ä–∞
            broker_fee_kzt = 100000

            # –î–æ—Å—Ç–∞–≤–∫–∞ (–ª–æ–≥–∏—Å—Ç–∏–∫–∞ –ø–æ –ö–æ—Ä–µ–µ + –¥–æ –ê–ª–º–∞—Ç—ã)
            delivery_fee_kzt = 2500 * usd_rate_kz
            fraht_fee_kzt = 500 * usd_rate_kz

            # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–°–ë–ö–¢–°)
            sbkts_fee_kzt = 60000

            # –†–∞—Å—á–µ—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            mpr = 3932  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤ —Ç–µ–Ω–≥–µ –Ω–∞ 2025 –≥–æ–¥

            if year >= datetime.datetime.now().year - 2:
                registration_fee_kzt = 0.25 * mpr  # –î–æ 2 –ª–µ—Ç
            elif year >= datetime.datetime.now().year - 3:
                registration_fee_kzt = 50 * mpr  # –û—Ç 2 –¥–æ 3 –ª–µ—Ç
            else:
                registration_fee_kzt = 500 * mpr  # –°—Ç–∞—Ä—à–µ 3 –ª–µ—Ç

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            total_cost_kzt = (
                car_price_kzt
                + vat_kzt
                + customs_fee_kzt
                + customs_declaration_fee_kzt
                + excise_fee_kzt
                + glory_traders_fee_kzt
                + broker_fee_kzt
                + delivery_fee_kzt
                + fraht_fee_kzt
                + sbkts_fee_kzt
                + utilization_fee_kzt
                + registration_fee_kzt
            )

            car_data["price_kzt"] = car_price_kzt
            car_data["vat_kzt"] = vat_kzt
            car_data["customs_fee_kzt"] = customs_fee_kzt
            car_data["customs_declaration_fee_kzt"] = customs_declaration_fee_kzt
            car_data["excise_fee_kzt"] = excise_fee_kzt
            car_data["broker_fee_kzt"] = broker_fee_kzt
            car_data["fraht_fee_kzt"] = fraht_fee_kzt
            car_data["sbkts_fee_kzt"] = sbkts_fee_kzt
            car_data["utilization_fee_kzt"] = utilization_fee_kzt
            car_data["total_price_kzt"] = total_cost_kzt
            car_data["first_registration_fee_kzt"] = registration_fee_kzt

            age_formatted = calculate_age(year, month)
            engine_volume_formatted = f"{format_number(car_engine_displacement)} cc"

            preview_link = f"https://fem.encar.com/cars/detail/{car_id}"

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_message = (
                f"–í–æ–∑—Ä–∞—Å—Ç: {age_formatted}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ö–æ—Ä–µ–µ: {format_number(car_price_krw)} ‚Ç©\n"
                f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n\n"
                f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–¥ –∫–ª—é—á –¥–æ –ê–ª–º–∞—Ç—ã: \n<b>{format_number(total_cost_kzt)} ‚Ç∏</b>\n\n"
                f"üîó <a href='{preview_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å</a>\n\n"
                "–ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @GLORY_TRADERS\n\n"
                "üîó <a href='https://t.me/GLORYTRADERS'>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª</a>\n"
            )

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail"
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "üìù –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                    callback_data="technical_report",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/GLORY_TRADERS"
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )

            bot.send_message(
                message.chat.id,
                result_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )

        elif current_country == "Kyrgyzstan":
            print_message("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ KGS
            car_price_krw = int(car_price) * 10000
            price_kgs = car_price_krw * krw_rate_krg

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–º–æ–∂–µ–Ω–Ω—É—é –ø–æ—à–ª–∏–Ω—É
            if len(car_date) > 6:
                car_year = int(f"20{re.sub(r"\D", "", car_date.split(" ")[0])}")
            else:
                car_year = int(f"20{car_date[-2:]}")

            customs_fee_kgs_usd = calculate_customs_fee_kg(
                car_engine_displacement, car_year
            )

            customs_fee_kgs = customs_fee_kgs_usd * usd_rate_krg

            # –ù–î–° (12%)
            # vat = price_kgs * 0.12

            # –ê–∫—Ü–∏–∑–Ω—ã–π —Å–±–æ—Ä
            # excise_fee = (
            #     (int(engine_volume) - 3000) * 100 if int(engine_volume) > 3000 else 0
            # )

            # –ë—Ä–æ–∫–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏
            broker_fee = 100000

            # –î–æ—Å—Ç–∞–≤–∫–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–≤—Ç–æ)
            if car_type == "sedan":
                delivery_fee = 2400 * usd_rate_krg
            elif car_type == "crossover":
                delivery_fee = 2500 * usd_rate_krg
            else:
                delivery_fee = 2600 * usd_rate_krg

            # –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            total_cost_kgs = (
                price_kgs + customs_fee_kgs + delivery_fee + (440000 * krw_rate_krg)
            )

            car_data["price_kgs"] = price_kgs
            car_data["customs_fee_kgs"] = customs_fee_kgs
            car_data["delivery_fee_kgs"] = delivery_fee
            car_data["total_price_kgs"] = total_cost_kgs

            year, month = 0, 0
            if len(car_date) > 6:
                year = int(f"20{re.sub(r"\D", "", car_date.split(" ")[0])}")
                month = int(re.sub(r"\D", "", car_date.split(" ")[1]))
            else:
                year = int(f"20{car_date[-2:]}")
                month = int(car_date[2:4])

            age_formatted = calculate_age(year, month)
            engine_volume_formatted = f"{format_number(car_engine_displacement)} cc"

            preview_link = f"https://fem.encar.com/cars/detail/{car_id}"

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_message = (
                f"–í–æ–∑—Ä–∞—Å—Ç: {age_formatted}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ö–æ—Ä–µ–µ: {format_number(car_price_krw)} ‚Ç©\n"
                f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n\n"
                f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–¥ –∫–ª—é—á –¥–æ –ë–∏—à–∫–µ–∫–∞: \n<b>{format_number(total_cost_kgs)} KGS</b>\n\n"
                f"üîó <a href='{preview_link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å</a>\n\n"
                "–ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @GLORY_TRADERS\n\n"
                "üîó <a href='https://t.me/GLORYTRADERS'>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª</a>\n"
            )

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail"
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "üìù –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                    callback_data="technical_report",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/GLORY_TRADERS"
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )

            bot.send_message(
                message.chat.id,
                result_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )

        else:
            send_error_message(
                message,
                "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            )
            bot.delete_message(message.chat.id, processing_message.message_id)


def get_insurance_total():
    global car_id_external

    print_message("[–ó–ê–ü–†–û–°] –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –û–¢–ß√ã–¢ –û–ë –ê–í–¢–û–ú–û–ë–ò–õ–ï")

    driver = create_driver()
    url = f"http://fem.encar.com/cars/report/accident/{car_id_external}"

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebDriver
        driver.get(url)
        time.sleep(3)

        try:
            report_accident_el = driver.find_element(
                By.CLASS_NAME, "ReportAccidentSummary_list_accident__q6vLx"
            )

            splitted_report = report_accident_el.text.split("\n")
            damage_to_my_car = splitted_report[4]
            damage_to_other_car = splitted_report[5]
        except NoSuchElementException:
            print("–≠–ª–µ–º–µ–Ω—Ç 'smlist' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"]

        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞
        def extract_large_number(damage_text):
            if "ÏóÜÏùå" in damage_text:
                return "0"
            numbers = re.findall(r"[\d,]+(?=\s*Ïõê)", damage_text)
            return numbers[0] if numbers else "0"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        damage_to_my_car_formatted = extract_large_number(damage_to_my_car)
        damage_to_other_car_formatted = extract_large_number(damage_to_other_car)

        print(f"–í—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: {damage_to_my_car_formatted}")
        print(f"–í—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: {damage_to_other_car_formatted}")

        return [damage_to_my_car_formatted, damage_to_other_car_formatted]

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", ""]

    finally:
        driver.quit()


# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    global car_data, car_id_external, current_country, usd_rate_kz, krw_rate_krg

    if call.data.startswith("detail"):
        detail_message = ""

        if current_country == "Russia":
            print_message("[–†–û–°–°–ò–Ø] –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ß√ã–¢–ê")

            # Construct cost breakdown message
            detail_message = (
                "üìù –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞:\n\n"
                f"–°—Ç–æ–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {format_number(car_data['price_rub'])} ‚ÇΩ\n\n"
                f"–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π c–±–æ—Ä: {format_number(car_data['duty'])} ‚ÇΩ\n\n"
                f"–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: {format_number(car_data['customs_duty_fee'])} ‚ÇΩ\n\n"
                f"–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {format_number(car_data['recycling_fee'])} ‚ÇΩ\n\n"
                # f"–ê–∫—Ü–∏–∑–∞: {format_number(car_data['excise'])} ‚ÇΩ\n\n"
                f"–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: 110,000 ‚ÇΩ\n\n"
                f"–£—Å–ª—É–≥–∏ –±—Ä–æ–∫–µ—Ä–∞: 120,000 ‚ÇΩ\n\n"
                f"<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {format_number(car_data['total_price'])} ‚ÇΩ</b>\n\n"
                f"<b>–ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –¶–ï–ù–ê –ù–ê –ê–í–¢–û–ú–û–ë–ò–õ–¨ –ó–ê–í–ò–°–ò–¢ –û–¢ –¢–ï–ö–£–©–ï–ì–û –ö–£–†–°–ê, –î–õ–Ø –ë–û–õ–ï–ï –¢–û–ß–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –ù–ê–ü–ò–®–ò–¢–ï –ù–ê–®–ï–ú–£ –ú–ï–ù–ï–î–ñ–ï–†–£ @GLORY_TRADERS</b>"
            )

        if current_country == "Kazakhstan":
            print_message("[–ö–ê–ó–ê–•–°–¢–ê–ù] –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ß√ã–¢–ê")

            detail_message = (
                "üìù –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞:\n\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ: <b>{format_number(car_data['price_kzt'])} ‚Ç∏</b>\n\n"
                f"–ù–î–° (12%): <b>{format_number(car_data['vat_kzt'])} ‚Ç∏</b>\n\n"
                f"–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: <b>{format_number(car_data['customs_fee_kzt'])} ‚Ç∏</b>\n\n"
                f"–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è: <b>{format_number(car_data['customs_declaration_fee_kzt'])} ‚Ç∏</b>\n\n"
                f"–£—Ç–∏–ª—å—Å–±–æ—Ä: <b>{format_number(car_data['utilization_fee_kzt'])} ‚Ç∏</b>\n\n"
                f"–ü–µ—Ä–≤–∏—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <b>{format_number(car_data['first_registration_fee_kzt'])} ‚Ç∏</b>\n\n"
                f"–ê–∫—Ü–∏–∑: <b>{format_number(car_data['excise_fee_kzt'])} ‚Ç∏</b>\n\n"
                f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥ –∫–ª—é—á –¥–æ –ê–ª–º–∞—Ç—ã: <b>{format_number(car_data['total_price_kzt'])} ‚Ç∏</b>\n\n"
                f"<b>–ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –¶–ï–ù–ê –ù–ê –ê–í–¢–û–ú–û–ë–ò–õ–¨ –ó–ê–í–ò–°–ò–¢ –û–¢ –¢–ï–ö–£–©–ï–ì–û –ö–£–†–°–ê, –î–õ–Ø –ë–û–õ–ï–ï –¢–û–ß–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –ù–ê–ü–ò–®–ò–¢–ï –ù–ê–®–ï–ú–£ –ú–ï–ù–ï–î–ñ–ï–†–£ @GLORY_TRADERS</b>"
            )

        if current_country == "Kyrgyzstan":
            print_message("[–ö–´–†–ì–´–ó–°–¢–ê–ù] –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ß√ã–¢–ê")

            detail_message = (
                "üìù –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞:\n\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ —Å–æ–º–∞—Ö: <b>{format_number(car_data['price_kgs'])} KGS</b>\n\n"
                f"–£—Å–ª—É–≥–∏ Glory Traders: <b>{format_number(440000 * krw_rate_krg)} KGS</b>\n\n"
                f"–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: <b>{format_number(car_data['customs_fee_kgs'])}</b> KGS\n\n"
                f"–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ë–∏—à–∫–µ–∫–∞: <b>{format_number(car_data['delivery_fee_kgs'])}</b> KGS\n\n"
                f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–¥ –∫–ª—é—á –¥–æ –ë–∏—à–∫–µ–∫–∞: \n<b>{format_number(car_data["total_price_kgs"])} KGS</b>\n\n"
                f"<b>–ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –¶–ï–ù–ê –ù–ê –ê–í–¢–û–ú–û–ë–ò–õ–¨ –ó–ê–í–ò–°–ò–¢ –û–¢ –¢–ï–ö–£–©–ï–ì–û –ö–£–†–°–ê, –î–õ–Ø –ë–û–õ–ï–ï –¢–û–ß–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –ù–ê–ü–ò–®–ò–¢–ï –ù–ê–®–ï–ú–£ –ú–ï–ù–ï–î–ñ–ï–†–£ @GLORY_TRADERS</b>"
            )

        # Inline buttons for further actions
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/GLORY_TRADERS"
            )
        )

        bot.send_message(
            call.message.chat.id,
            detail_message,
            parse_mode="HTML",
            reply_markup=keyboard,
        )

    elif call.data == "technical_report":
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥",
        )

        # Retrieve insurance information
        insurance_info = get_insurance_total()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
        if "–û—à–∏–±–∫–∞" in insurance_info[0] or "–û—à–∏–±–∫–∞" in insurance_info[1]:
            error_message = (
                "–°—Ç—Ä–∞—Ö–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. \n\n"
                f'<a href="https://fem.encar.com/cars/detail/{car_id_external}">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å üîó</a>'
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/MANAGER"
                )
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            bot.send_message(
                call.message.chat.id,
                error_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        else:
            current_car_insurance_payments = (
                "0" if len(insurance_info[0]) == 0 else insurance_info[0]
            )
            other_car_insurance_payments = (
                "0" if len(insurance_info[1]) == 0 else insurance_info[1]
            )

            # Construct the message for the technical report
            tech_report_message = (
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: \n<b>{current_car_insurance_payments} ‚Ç©</b>\n\n"
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü: \n<b>{other_car_insurance_payments} ‚Ç©</b>\n\n"
                f'<a href="https://fem.encar.com/cars/report/inspect/{car_id_external}">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ö–µ–º—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∫—É–∑–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ üîó</a>'
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/MANAGER"
                )
            )

            bot.send_message(
                call.message.chat.id,
                tech_report_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )

    elif call.data == "calculate_another":
        show_country_selection(call.message.chat.id)


# –†–∞—Å—á—ë—Ç—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
def calculate_cost_manual(country, year, month, engine_volume, price, car_type):
    global eur_rub_rate

    if country == "Russia":
        print_message("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä—É—á–Ω–æ–π —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –†–æ—Å—Å–∏–∏")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ —Ä—É–±–ª–∏
        age_formatted = calculate_age(year, month)
        price_krw = int(price)
        car_price_rub = price_krw * krw_rub_rate
        car_price_euro = car_price_rub / eur_rub_rate
        # horsepower = calculate_horse_power(engine_volume)
        customs_fee = calculate_customs_fee(car_price_rub)
        recycling_fee = calculate_recycling_fee(int(engine_volume), age_formatted)
        customs_duty = calculate_customs_duty(
            car_price_euro, int(engine_volume), (eur_rub_rate + 3), age_formatted
        )
        excise_fee = calculate_excise_by_volume(engine_volume=int(engine_volume))

        total_cost = (
            (1000 * usd_rate)
            + (250 * usd_rate)
            + 120000
            + customs_duty
            + recycling_fee
            + 440000 * krw_rub_rate
            + car_price_rub
        )

        result_message = (
            f"–†–∞—Å—á—ë—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n"
            f"–î–∞—Ç–∞: <i>{str(year)}/{str(month)}</i>\n–û–±—ä—ë–º: <b>{format_number(engine_volume)} cc</b>\n–¶–µ–Ω–∞ –≤ –ö–æ—Ä–µ–µ: <b>{format_number(price)} ‚Ç©</b>\n"
            f"–ü–æ–¥ –∫–ª—é—á –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: <b>{format_number(total_cost)}</b> ‚ÇΩ\n\n\n"
            f"–õ–æ–≥–∏—Å—Ç–∏–∫–∞ c –ö–æ—Ä–µ–∏ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞\n"
            f"- 1000$ (–º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è)\n"
            f"- –ö–æ–º–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: 250$\n\n"
            f"–†–∞—Å—Ö–æ–¥—ã –ø–æ –†–§\n"
            f"- –£—Å–ª—É–≥–∏ –±—Ä–æ–∫–µ—Ä–∞\n- –í—ã–≥—Ä—É–∑–∫–∞\n- –°–í–• (–≤ –ø–æ—Ä—Ç—É)\n- –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è\n- –ü–æ–ª—É—á–µ–Ω–∏–µ –≠–°–ë–ì–¢–° –∏ –≠–ü–¢–°\n<b>–ò—Ç–æ–≥–æ: –æ—Ç 80,000 ‚ÇΩ –¥–æ 120,000 ‚ÇΩ</b>\n\n"
            f"–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>{format_number(customs_duty)} ‚ÇΩ</b>\n"
            f"–£—Ç–∏–ª—å—Å–±–æ—Ä: <b>{format_number(recycling_fee)} ‚ÇΩ</b>\n\n"
            f"–¶–µ–Ω—ã –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—É—Ä—Å–∞, –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–∏—à–∏—Ç–µ @GLORY_TRADERS"
        )

        return result_message
    elif country == "Kazakhstan":
        print_message("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä—É—á–Ω–æ–π —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∞–≤—Ç–æ –≤ —Ç–µ–Ω–≥–µ
        car_price_kzt = price * krw_rate_kz

        # –ù–î–° (12%)
        vat_kzt = car_price_kzt * 0.12

        # –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞ (15%)
        customs_fee_kzt = car_price_kzt * 0.15

        # –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è
        customs_declaration_fee_kzt = 25152

        # –£—Ç–∏–ª—å—Å–±–æ—Ä
        engine_volume = int(engine_volume)
        base_utilization_fee_kzt = 200000  # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        if engine_volume <= 1000:
            coefficient = 0.5
        elif engine_volume <= 2000:
            coefficient = 1.0
        elif engine_volume <= 3000:
            coefficient = 2.0
        elif engine_volume <= 4000:
            coefficient = 3.0
        else:
            coefficient = 4.0

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ç–∏–ª—å—Å–±–æ—Ä
        utilization_fee_kzt = base_utilization_fee_kzt * coefficient

        # –ê–∫—Ü–∏–∑–Ω—ã–π —Å–±–æ—Ä
        excise_fee_kzt = (
            (int(engine_volume) - 3000) * 100 if int(engine_volume) > 3000 else 0
        )

        # –£—Å–ª—É–≥–∏ Glory Traders
        glory_traders_fee_kzt = 450000 * krw_rate_kz

        # –£—Å–ª—É–≥–∏ –±—Ä–æ–∫–µ—Ä–∞
        broker_fee_kzt = 100000

        # –î–æ—Å—Ç–∞–≤–∫–∞ (–ª–æ–≥–∏—Å—Ç–∏–∫–∞ –ø–æ –ö–æ—Ä–µ–µ + –¥–æ –ê–ª–º–∞—Ç—ã)
        delivery_fee_kzt = 2500 * usd_rate_kz
        fraht_fee_kzt = 500 * usd_rate_kz

        # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–°–ë–ö–¢–°)
        sbkts_fee_kzt = 60000

        # –†–∞—Å—á–µ—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        mpr = 3932  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤ —Ç–µ–Ω–≥–µ –Ω–∞ 2025 –≥–æ–¥

        if year >= datetime.datetime.now().year - 2:
            registration_fee_kzt = 0.25 * mpr  # –î–æ 2 –ª–µ—Ç
        elif year >= datetime.datetime.now().year - 3:
            registration_fee_kzt = 50 * mpr  # –û—Ç 2 –¥–æ 3 –ª–µ—Ç
        else:
            registration_fee_kzt = 500 * mpr  # –°—Ç–∞—Ä—à–µ 3 –ª–µ—Ç

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total_cost_kzt = (
            car_price_kzt
            + vat_kzt
            + customs_fee_kzt
            + customs_declaration_fee_kzt
            + excise_fee_kzt
            + glory_traders_fee_kzt
            + broker_fee_kzt
            + delivery_fee_kzt
            + fraht_fee_kzt
            + sbkts_fee_kzt
            + utilization_fee_kzt
            + registration_fee_kzt
        )
        result_message = (
            f"–†–∞—Å—á—ë—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n"
            f"–î–∞—Ç–∞: <i>{str(year)}/{str(month)}</i>\n–û–±—ä—ë–º: <b>{format_number(engine_volume)} cc</b>\n–¶–µ–Ω–∞ –≤ –ö–æ—Ä–µ–µ: <b>{format_number(price)} ‚Ç©</b>\n"
            f"–ü–æ–¥ –∫–ª—é—á –¥–æ –ê–ª–º–∞—Ç—ã: <b>{format_number(total_cost_kzt)}</b> ‚Ç∏\n\n"
            f"–¶–µ–Ω—ã –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—É—Ä—Å–∞, –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–∏—à–∏—Ç–µ @GLORY_TRADERS"
        )

        return result_message
    elif country == "Kyrgyzstan":
        print_message("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä—É—á–Ω–æ–π —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞")

        price_kgs = price * krw_rate_krg
        customs_fee_kgs_usd = calculate_customs_fee_kg(engine_volume, year)
        customs_fee_kgs = customs_fee_kgs_usd * usd_rate_krg
        if car_type == "sedan":
            delivery_fee = 2400 * usd_rate_krg
        elif car_type == "crossover":
            delivery_fee = 2500 * usd_rate_krg
        else:
            delivery_fee = 2600 * usd_rate_krg

        # –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total_cost_kgs = (
            price_kgs + customs_fee_kgs + delivery_fee + (440000 * krw_rate_krg)
        )

        result_message = (
            f"–†–∞—Å—á—ë—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n"
            f"–î–∞—Ç–∞: <i>{str(year)}/{str(month)}</i>\n–û–±—ä—ë–º: <b>{format_number(engine_volume)} cc</b>\n–¶–µ–Ω–∞ –≤ –ö–æ—Ä–µ–µ: <b>{format_number(price)} ‚Ç©</b>\n"
            f"–ü–æ–¥ –∫–ª—é—á –¥–æ –ë–∏—à–∫–µ–∫–∞: <b>{format_number(total_cost_kgs)}</b> KGS\n\n"
            f"–¶–µ–Ω—ã –º–æ–≥—É—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—É—Ä—Å–∞, –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–∏—à–∏—Ç–µ @GLORY_TRADERS"
        )

        return result_message
    else:
        return "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞."
