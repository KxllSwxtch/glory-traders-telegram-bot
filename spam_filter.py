import re
import time
from typing import Dict, List, Set
from telebot.types import Message

class SpamFilter:
    def __init__(self):
        # –°–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤
        self.crypto_spam_patterns = [
            r'(?i)airdrop.*live',
            r'(?i)private.*token.*airdrop',
            r'(?i)don\'t miss.*chance',
            r'(?i)only for.*group',
            r'(?i)free.*crypto',
            r'(?i)claim.*token',
            r'(?i)limited.*time.*offer',
            r'(?i)pump.*dump',
            r'(?i)guaranteed.*profit',
            r'(?i)invest.*bitcoin',
            r'(?i)double.*investment',
            r'(?i)earn.*daily',
            r'(?i)mining.*pool',
            r'(?i)wallet.*verification',
            r'(?i)seed.*phrase',
            r'(?i)recovery.*phrase',
        ]

        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        self.suspicious_keywords = [
            'airdrop', 'token', 'crypto', 'bitcoin', 'ethereum', 'bnb',
            'usdt', 'doge', 'shib', 'pump', 'moon', 'üöÄ', 'investment',
            'profit', 'earn', 'free money', 'bonus', 'reward', 'mining',
            'wallet', 'metamask', 'binance', 'exchange', 'trading'
        ]

        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        self.suspicious_domains = [
            't.me',
            'bit.ly',
            'tinyurl.com',
            'telegram.me',
            'telegram.dog',
        ]

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        self.user_message_count: Dict[int, List[float]] = {}
        self.rate_limit_window = 60  # —Å–µ–∫—É–Ω–¥
        self.max_messages_per_window = 10

        # –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.blacklisted_users: Set[int] = set()

        # –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—ã, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
        self.whitelisted_users: Set[int] = set()

        # –ê–¥–º–∏–Ω—ã –±–æ—Ç–∞ (–¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à user_id —Å—é–¥–∞)
        self.admin_users: Set[int] = {
            # 123456789,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à user_id
        }

    def is_bot_message(self, message: Message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞"""
        if message.from_user and message.from_user.is_bot:
            return True
        return False

    def is_spam_message(self, message: Message) -> bool:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞"""
        if not message.text:
            return False

        text = message.text.lower()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for pattern in self.crypto_spam_patterns:
            if re.search(pattern, text):
                return True

        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        suspicious_word_count = sum(1 for keyword in self.suspicious_keywords if keyword in text)
        if suspicious_word_count >= 3:  # –ï—Å–ª–∏ 3+ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤–∞
            return True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        if self.contains_suspicious_links(text):
            return True

        return False

    def contains_suspicious_links(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
        urls = re.findall(url_pattern, text)

        for url in urls:
            for domain in self.suspicious_domains:
                if domain in url:
                    return True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ t.me —Å—Å—ã–ª–∫–∏ (–∫—Ä–æ–º–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)
        if 't.me/' in text and 'GLORYTRADERS' not in text.upper():
            return True

        return False

    def is_rate_limited(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        current_time = time.time()

        if user_id not in self.user_message_count:
            self.user_message_count[user_id] = []

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self.user_message_count[user_id] = [
            timestamp for timestamp in self.user_message_count[user_id]
            if current_time - timestamp < self.rate_limit_window
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.user_message_count[user_id].append(current_time)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        return len(self.user_message_count[user_id]) > self.max_messages_per_window

    def add_to_blacklist(self, user_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        self.blacklisted_users.add(user_id)

    def add_to_whitelist(self, user_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
        self.whitelisted_users.add(user_id)

    def is_blacklisted(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
        return user_id in self.blacklisted_users

    def is_whitelisted(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"""
        return user_id in self.whitelisted_users

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in self.admin_users

    def add_admin(self, user_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω—ã"""
        self.admin_users.add(user_id)
        self.add_to_whitelist(user_id)  # –ê–¥–º–∏–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ

    def should_ignore_message(self, message: Message) -> bool:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not message.from_user:
            return True

        user_id = message.from_user.id

        # –ê–¥–º–∏–Ω—ã –∏ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if self.is_admin(user_id) or self.is_whitelisted(user_id):
            return False

        # –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
        if self.is_blacklisted(user_id):
            return True

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if self.is_bot_message(message):
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
        if self.is_spam_message(message):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞ —Å–ø–∞–º
            self.add_to_blacklist(user_id)
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        if self.is_rate_limited(user_id):
            return True

        return False

    def get_spam_reason(self, message: Message) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        if not message.from_user:
            return "No user info"

        user_id = message.from_user.id

        if self.is_blacklisted(user_id):
            return "User blacklisted"

        if self.is_bot_message(message):
            return "Bot message"

        if self.is_spam_message(message):
            return "Spam content detected"

        if self.is_rate_limited(user_id):
            return "Rate limited"

        return "Unknown"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∏–ª—å—Ç—Ä–∞
spam_filter = SpamFilter()